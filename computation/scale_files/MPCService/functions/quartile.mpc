from Compiler import input_output

# Set LEN and COLS values
LEN = 10
COLS = 2

l = LEN
dim = [LEN // COLS, COLS]

def lower_quartile(M):
    cols = len(M[0])
    rows = len(M)
    # Flatten matrix into a list for sorting
    flat_M = [item for sublist in M for item in sublist]
    # Sort list in ascending order
    flat_M.sort()
    # Find median index
    median_idx = len(flat_M) // 2
    # If length is odd, return median value
    if len(flat_M) % 2 == 1:
        return [flat_M[median_idx]]
    # If length is even, return average of two middle values
    else:
        return [(flat_M[median_idx-1] + flat_M[median_idx]) / 2]

# Load input matrix
X = input_output.load_sfix_matrix(dim[0], dim[1])

# Find lower quartile value using lower_quartile function
res = lower_quartile(X)

# Output resulting array
input_output.output_sfix_array(res)